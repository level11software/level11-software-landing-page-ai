"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIconButtonSizes = exports.getButtonSizes = exports.getBaseButton = exports.iconButtonUtilities = exports.trailingIconSizes = exports.leadingIconSizes = exports.iconSizes = exports.iconOnlyButtonSizes = exports.buttonSizes = exports.base = void 0;
var solidColors_1 = require("./solidColors");
var button_config_1 = require("./../../button.config");
var base = {
    layout: "group font-medium [--radial-opacity:0.4] dark:[--radial-opacity:0] rounded-[--btn-border-radius] [background-image:radial-gradient(76%_151%_at_52%_-52%,rgba(255,255,255,var(--radial-opacity))_0%,transparent_100%)] flex items-center justify-center transition-[filter] duration-150 ease-in-out active:brightness-95 dark:shadow-inner dark:border-t dark:border-t-white/35 outline-2 outline-offset-2 focus-visible:outline outline-primary-600 dark:shadow-white/20 disabled:bg-gray-200 disabled:text-gray-400 disabled:shadow-none disabled:hover:brightness-100 dark:disabled:bg-gray-500/10 dark:disabled:[background-image:none] dark:disabled:text-gray-700 dark:disabled:shadow-none dark:disabled:border-none",
    appearances: {
        light: "",
        dark: "",
        both: "",
    },
};
exports.base = base;
var iconButtonUtilities = "flex items-center gap-1.5 items-center";
exports.iconButtonUtilities = iconButtonUtilities;
var buttonSizes = {
    xs: "text-sm h-7 px-2.5",
    sm: "text-sm h-8 px-3.5",
    md: "text-base h-9 px-4",
    lg: "text-base h-10 px-5",
    xl: "text-base h-12 px-6",
};
exports.buttonSizes = buttonSizes;
var iconOnlyButtonSizes = {
    xs: "size-7",
    sm: "size-8",
    md: "size-9",
    lg: "size-10",
    xl: "size-12",
};
exports.iconOnlyButtonSizes = iconOnlyButtonSizes;
var iconSizes = {
    xs: "m-auto size-3.5",
    sm: "m-auto size-4",
    md: "m-auto size-[1.125rem]",
    lg: "m-auto size-5",
    xl: "m-auto size-6",
};
exports.iconSizes = iconSizes;
var leadingIconSizes = {
    xs: "-ml-1 size-3.5",
    sm: "-ml-1 size-4",
    md: "-ml-1 size-[1.125rem]",
    lg: "-ml-1 size-5",
    xl: "-ml-1 size-6",
};
exports.leadingIconSizes = leadingIconSizes;
var trailingIconSizes = {
    xs: "-mr-1 size-3.5",
    sm: "-mr-1 size-4",
    md: "-mr-1 size-[1.125rem]",
    lg: "-mr-1 size-5",
    xl: "-mr-1 size-6",
};
exports.trailingIconSizes = trailingIconSizes;
/**
 * Gets the base Tailwind utilities for a button.

 * @param color The color utilities of the button.
 * @param colors The object containing the colors utilities.
 * @returns A string containing the Tailwind utilities, including color utilities for the button.
 */
var getBaseButton = function (color, buttonBase, colors) {
    if (buttonBase === void 0) { buttonBase = base; }
    if (colors === void 0) { colors = solidColors_1.default; }
    return "".concat(buttonBase.layout, " ").concat(buttonBase.appearances[button_config_1.default.appearance], " ").concat(colors[color]);
};
exports.getBaseButton = getBaseButton;
/**
 * Gets an object containing the Tailwind utilities for a button with all sizes.

 * @param color The color utilities of the button.
 * @param buttonSizes The object containing the button sizes.
 * @returns An object containing the Tailwind utilities for the button with all sizes.
 *
 * **Note:** This function should not be used for leading Icon buttons or trailing Icon buttons. For those types of buttons, use the `getIconButtonWithSizes()` function instead.
 */
var getButtonSizes = function (color, sizes) {
    if (sizes === void 0) { sizes = buttonSizes; }
    return {
        xs: "".concat(getBaseButton(color), " ").concat(sizes.xs),
        sm: "".concat(getBaseButton(color), " ").concat(sizes.sm),
        md: "".concat(getBaseButton(color), " ").concat(sizes.md),
        lg: "".concat(getBaseButton(color), " ").concat(sizes.lg),
        xl: "".concat(getBaseButton(color), " ").concat(sizes.xl),
    };
};
exports.getButtonSizes = getButtonSizes;
/**
 * Gets an object containing the base Tailwind utilities for a **leading Icon button** or **trailing Icon button** with all sizes.

 * @param color The color utilities of the button.
 * @param buttonSizes The object containing the button sizes.
 * @returns An object containing the base Tailwind utilities for the button with all sizes.

 * **Note:** This function should not be used for icon-only buttons. For icon-only buttons, use the `getButtonWithSizes()` function instead.
 */
var getIconButtonSizes = function (color, sizes) {
    if (sizes === void 0) { sizes = buttonSizes; }
    return {
        xs: "".concat(getBaseButton(color), " ").concat(iconButtonUtilities, " ").concat(sizes.xs),
        sm: "".concat(getBaseButton(color), " ").concat(iconButtonUtilities, " ").concat(sizes.sm),
        md: "".concat(getBaseButton(color), " ").concat(iconButtonUtilities, " ").concat(sizes.md),
        lg: "".concat(getBaseButton(color), " ").concat(iconButtonUtilities, " ").concat(sizes.lg),
        xl: "".concat(getBaseButton(color), " ").concat(iconButtonUtilities, " ").concat(sizes.xl),
    };
};
exports.getIconButtonSizes = getIconButtonSizes;
