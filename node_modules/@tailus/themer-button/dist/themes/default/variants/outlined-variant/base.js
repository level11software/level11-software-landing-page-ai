"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trailingIconSizes = exports.leadingIconSizes = exports.iconSizes = exports.getGhostIconOnlyButtonSizes = exports.getOutlinedButtonSizes = exports.getOutlinedIconButtonSizes = void 0;
var index_1 = require("./../index");
var colors_1 = require("./colors");
var outlinedBase = {
    layout: "group flex items-center relative [borderWidth:--btn-border-width] rounded-[--btn-border-radius] *:select-none [&>*:not(.sr-only)]:relative text-white before:absolute before:inset-0 before:rounded-[calc(var(--btn-border-radius)-1px)] before:absolute before:inset-0 before:border-t before:bg-gradient-to-b *:disabled:opacity-20 disabled:before:border-0 disabled:border",
    appearances: {
        light: "bg-white before:border-white disabled:before:bg-gray-100 disabled:text-gray-950 disabled:border-gray-200 disabled:bg-gray-100 disabled:*:text-gray-300 disabled:before:border-transparent disabled:before:bg-gray-50 disabled:before:from-transparent",
        dark: "dark:bg-transparent dark:before:border-b dark:before:border-t-0 dark:before:border-transparent dark:before:from-transparent dark:hover:before:border-gray-950/20 dark:disabled:border-gray-800/50 disabled:dark:bg-gray-900 dark:disabled:before:bg-gray-900 dark:disabled:before:from-gray-900 dark:*:disabled:!text-white",
        both: "bg-white dark:bg-transparent before:border-white disabled:before:bg-gray-100 disabled:text-gray-950/40 disabled:border-gray-200 disabled:bg-gray-100 disabled:*:text-gray-300 disabled:before:border-transparent disabled:before:bg-gray-50 disabled:before:from-transparent dark:before:border-b dark:before:border-t-0 dark:before:border-transparent dark:before:from-transparent dark:hover:before:border-gray-950/20 dark:disabled:border-gray-800/50 disabled:dark:bg-gray-900 dark:disabled:before:bg-gray-900 dark:disabled:before:from-gray-900 dark:*:disabled:!text-white",
    },
};
var getOutlinedButtonSizes = function (color, base, sizes) {
    if (base === void 0) { base = outlinedBase; }
    if (sizes === void 0) { sizes = index_1.buttonSizes; }
    return (0, index_1.getButtonSizes)(color, base, colors_1.default, sizes);
};
exports.getOutlinedButtonSizes = getOutlinedButtonSizes;
var getOutlinedIconButtonSizes = function (color, sizes) {
    if (sizes === void 0) { sizes = index_1.buttonSizes; }
    return (0, index_1.getIconButtonSizes)(color, outlinedBase, colors_1.default, sizes);
};
exports.getOutlinedIconButtonSizes = getOutlinedIconButtonSizes;
var getGhostIconOnlyButtonSizes = function (color) {
    return getOutlinedButtonSizes(color, outlinedBase, index_1.iconOnlyButtonSizes);
};
exports.getGhostIconOnlyButtonSizes = getGhostIconOnlyButtonSizes;
var index_2 = require("./../index");
Object.defineProperty(exports, "iconSizes", { enumerable: true, get: function () { return index_2.iconSizes; } });
Object.defineProperty(exports, "leadingIconSizes", { enumerable: true, get: function () { return index_2.leadingIconSizes; } });
Object.defineProperty(exports, "trailingIconSizes", { enumerable: true, get: function () { return index_2.trailingIconSizes; } });
